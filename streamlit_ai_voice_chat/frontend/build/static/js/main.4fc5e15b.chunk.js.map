{"version":3,"sources":["Dictaphone.jsx","MediaDisplay.jsx","VoiceGPT.jsx","Main.tsx","index.tsx"],"names":["Dictaphone","_ref","commands","myFunc","listenAfterReply","no_response_time","apiInProgress","listenButton","session_listen","initialFinalTranscript","splitImage","finalTranscript","interimTranscript","resetTranscript","listening","browserSupportsSpeechRecognition","isMicrophoneAvailable","useSpeechRecognition","editableTranscript","setEditableTranscript","useState","show_transcript","setShowTranscript","selectedText","setSelectedText","selectionStart","setSelectionStart","selectionEnd","setSelectionEnd","showReplaceBox","setShowReplaceBox","replaceInput","setReplaceInput","isProcessingReplace","setIsProcessingReplace","textareaRef","useRef","cursorPosRef","replaceInputRef","handleTextSelection","current","start","end","selected","substring","length","handleReplaceText","async","trim","replaceCommand","api_body","action","original_text","replacement_prompt","result","undefined","_replaceInputRef$curr","console","log","originalPlaceholder","placeholder","setTimeout","newTranscript","focus","newCursorPos","setSelectionRange","error","useEffect","processTranscript","useCallback","prev","keywordFound","i","keywords","j","keyword","RegExp","search","React","createElement","Fragment","style","display","gap","marginBottom","onClick","backgroundColor","color","border","padding","borderRadius","cursor","fontSize","showTranscript_func","clearTranscript_func","title","position","boxShadow","fontWeight","fontStyle","alignItems","ref","type","value","onChange","e","target","onKeyDown","key","flex","disabled","marginTop","flexDirection","maxHeight","height","overflowY","animation","marginLeft","onSelect","onMouseUp","onKeyUp","width","resize","MediaDisplay","showImage","imageSrc","largeHeight","largeWidth","smallHeight","smallWidth","className","justifyContent","toLowerCase","endsWith","maxWidth","objectFit","controls","autoPlay","loop","muted","src","alt","g_anwers","CustomVoiceGPT","props","_refresh_ask$color_di","api","kwargs","show_video","input_text","face_recon","api_key","refresh_ask","self_image","api_audio","client_user","force_db_root","before_trigger","agent_actions","setImageSrc","imageSrc_name","setImageSrc_name","message","setMessage","answers","setAnswers","setListenAfterReply","modelsLoaded","setModelsLoaded","captureVideo","setCaptureVideo","textString","setTextString","setApiInProgress","speaking","setSpeakingInProgress","setlistening","show_conversation","setshow_conversation","showTooltip","setShowTooltip","showTooltip_conv","setShowTooltip_conv","setlistenButton","setsession_listen","convo_button","setconvo_button","before_trigger_vars","before_trigger_","faceData","audioRef","UserUsedChatWindow","setUserUsedChatWindow","buttonName","setButtonName","buttonName_listen","setButtonName_listen","setShowImage","selectedActions","setSelectedActions","datatree","setDataTree","datatreeTitle","setDataTreeTitle","datatree_title","selectedNodes","setSelectedNodes","collapsed","setCollapsed","windowWidth","setWindowWidth","updateWindowWidth","window","innerWidth","fetchImageData","response","axios","get","imageUrl","responseType","objectUrl","URL","createObjectURL","data","listenContinuously","SpeechRecognition","startListening","continuous","language","isMobile","test","navigator","userAgent","editingDataframe","setEditingDataframe","editedDataframe","setEditedDataframe","ret","command","text","user","dataframe","body","tigger_type","face_data","selected_actions","selected_nodes","post","pause","apiUrlWithFileName","Audio","play","Promise","resolve","onended","location","href","stopListening","findNodeByKey","tree","k","Object","entries","children","found","background_color_chat","color_dict","split","firstKey","nodeObj","nodeTitle","field_name","nodeLink","hyperlink","showSidebar","setShowSidebar","sidebarWide","setSidebarWide","minHeight","flexShrink","marginRight","background","outline","transition","aria-label","margin","alignSelf","borderRight","onSelectionChange","renderNodes","level","arguments","parentKeys","Array","isArray","map","_ref2","idx","nodePath","join","hasChildren","keys","isCollapsed","isLast","whiteSpace","fontFamily","paddingTop","paddingBottom","left","top","zIndex","bottom","[object Object]","toggleCollapse","lineHeight","userSelect","tabIndex","checked","includes","newSelected","filter","handleSelect","rel","textDecoration","overflow","textOverflow","verticalAlign","minWidth","slice","node","answer","textAlign","wordBreak","resp","dangerouslySetInnerHTML","__html","event","borderCollapse","col","row","rowIdx","newDF","r","flexWrap","click_listenButton","role","onMouseEnter","onMouseLeave","transform","pointerEvents","listenSession","a","withStreamlitConnection","args","Streamlit","setFrameHeight","VoiceGPT","engine","Styletron","ReactDOM","render","StrictMode","StyletronProvider","ThemeProvider","theme","LightTheme","Main","document","getElementById"],"mappings":"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","file":"static/js/main.4fc5e15b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback} from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\n\nconst Dictaphone = ({\n  commands,\n  myFunc,\n  listenAfterReply = false,\n  no_response_time = 3,\n  apiInProgress = false,\n  listenButton = false,\n  session_listen = false,\n  initialFinalTranscript = \"\",\n  splitImage = false,\n}) => {\n  const {\n    finalTranscript,\n    interimTranscript,\n    resetTranscript,\n    listening,\n    browserSupportsSpeechRecognition,\n    isMicrophoneAvailable,\n  } = useSpeechRecognition();\n\n  const [editableTranscript, setEditableTranscript] = useState(\"\");\n  const [show_transcript, setShowTranscript] = useState(true);\n  \n  // New states for text selection and replacement\n  const [selectedText, setSelectedText] = useState(\"\");\n  const [selectionStart, setSelectionStart] = useState(0);\n  const [selectionEnd, setSelectionEnd] = useState(0);\n  const [showReplaceBox, setShowReplaceBox] = useState(false);\n  const [replaceInput, setReplaceInput] = useState(\"\");\n  const [isProcessingReplace, setIsProcessingReplace] = useState(false);\n\n  const textareaRef = useRef(null);\n  const cursorPosRef = useRef(null);\n  const replaceInputRef = useRef(null);\n\n  // Handle text selection in textarea\n  const handleTextSelection = () => {\n    if (textareaRef.current) {\n      const start = textareaRef.current.selectionStart;\n      const end = textareaRef.current.selectionEnd;\n      const selected = editableTranscript.substring(start, end);\n      \n      if (selected.length > 0) {\n        setSelectedText(selected);\n        setSelectionStart(start);\n        setSelectionEnd(end);\n        setShowReplaceBox(true);\n        setReplaceInput(\"\"); // Clear previous input\n      } else {\n        setShowReplaceBox(false);\n        setSelectedText(\"\");\n      }\n    }\n  };\n\n  // Handle the replace operation\nconst handleReplaceText = async () => {\n  if (!replaceInput.trim() || !selectedText) return;\n\n  setIsProcessingReplace(true);\n  \n  try {\n    // Create a special command for text replacement\n    const replaceCommand = {\n      api_body: {\n        action: \"replace_text\",\n        original_text: selectedText,\n        replacement_prompt: replaceInput.trim()\n      }\n    };\n    \n    // Call myFunc and wait for the result\n    const result = await myFunc(replaceInput.trim(), replaceCommand, 9);\n    \n    // Check if result is valid for replacement\n    if (result === null || \n        result === undefined || \n        result === \"\" || \n        result === \"None\" ||\n        (typeof result === 'string' && result.trim() === \"\")) {\n      \n      console.log(\"MyFunc returned empty/null result, not replacing text\");\n      \n      // Show user feedback that no replacement occurred\n      setReplaceInput(\"\"); // Clear input but keep box open\n      \n      // Optional: Show a temporary message\n      const originalPlaceholder = replaceInputRef.current?.placeholder;\n      if (replaceInputRef.current) {\n        replaceInputRef.current.placeholder = \"No replacement text returned - try a different prompt\";\n        setTimeout(() => {\n          if (replaceInputRef.current) {\n            replaceInputRef.current.placeholder = originalPlaceholder || \"Enter replacement text or prompt...\";\n          }\n        }, 3000);\n      }\n      \n      return; // Exit without replacing text\n    }\n\n    // Replace the selected text with the result\n    const newTranscript = \n      editableTranscript.substring(0, selectionStart) + \n      result + \n      editableTranscript.substring(selectionEnd);\n    \n    setEditableTranscript(newTranscript);\n    setShowReplaceBox(false);\n    setSelectedText(\"\");\n    setReplaceInput(\"\");\n    \n    // Focus back to textarea and position cursor after replacement\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n      const newCursorPos = selectionStart + result.length;\n      textareaRef.current.setSelectionRange(newCursorPos, newCursorPos);\n    }\n    \n  } catch (error) {\n    console.error(\"Error replacing text:\", error);\n    \n    // Show error feedback to user\n    if (replaceInputRef.current) {\n      const originalPlaceholder = replaceInputRef.current.placeholder;\n      replaceInputRef.current.placeholder = \"Error occurred during replacement\";\n      setTimeout(() => {\n        if (replaceInputRef.current) {\n          replaceInputRef.current.placeholder = originalPlaceholder || \"Enter replacement text or prompt...\";\n        }\n      }, 3000);\n    }\n  } finally {\n    setIsProcessingReplace(false);\n  }\n};\n\n  // Cancel replace operation\n  const handleCancelReplace = () => {\n    setShowReplaceBox(false);\n    setSelectedText(\"\");\n    setReplaceInput(\"\");\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  // Focus replace input when box appears\n  useEffect(() => {\n    if (showReplaceBox && replaceInputRef.current) {\n      setTimeout(() => {\n        replaceInputRef.current.focus();\n      }, 100);\n    }\n  }, [showReplaceBox]);\n\n  const showTranscript_func = () => setShowTranscript((prev) => !prev);\n  \n  const clearTranscript_func = () => {\n    resetTranscript();\n    setEditableTranscript(\"\");\n    setShowReplaceBox(false);\n    setSelectedText(\"\");\n  };\n\n  // Logic to process transcript based on session_listen\n  const processTranscript = useCallback(() => {\n    if (finalTranscript !== \"\") {\n\n      if (listenButton) {\n        // When session_listen is false and not using listenButton, just append\n        myFunc(finalTranscript, { api_body: {} }, 8);\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript();\n        setEditableTranscript(\"\"); // Clear editable transcript state\n        return;\n      }\n\n\n      if (session_listen) {\n        // Check for keywords only when session_listen is true\n        let keywordFound = false;\n        for (let i = 0; i < commands.length; i++) {\n          const { keywords } = commands[i];\n          for (let j = 0; j < keywords.length; j++) {\n            const keyword = new RegExp(keywords[j], \"i\");\n            const isKeywordFound = finalTranscript.search(keyword) !== -1;\n  \n            if (isKeywordFound && !apiInProgress) {\n              console.log(`Keyword found: ${keywords[j]}`);\n              myFunc(finalTranscript, commands[i], 1);\n              resetTranscript(); // Reset transcript after processing keyword\n              // setEditableTranscript(\"\"); // Clear editable transcript state\n              keywordFound = true;\n              return;\n            }\n          }\n        }\n  \n        if (!keywordFound) {\n          // Append transcript if no keyword is found\n          setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n          resetTranscript(); // Clear finalTranscript after appending\n        }\n      } else {\n        // When session_listen is false, focus on capturing speech-to-text\n        if (textareaRef.current) {\n          cursorPosRef.current = textareaRef.current.selectionStart;\n        }\n\n        console.log(\"Recording speech-to-text without keyword triggers\");\n        setEditableTranscript((prev) => `${prev} ${finalTranscript}`.trim());\n        resetTranscript(); // Clear finalTranscript after appending\n      }\n    }\n }, [finalTranscript, listenButton, session_listen, commands, apiInProgress]);\n\nuseEffect(() => {\n  if (initialFinalTranscript) {\n    setEditableTranscript((prev) => `${prev} ${initialFinalTranscript}`.trim());\n  }\n  \n  processTranscript();\n}, [initialFinalTranscript, processTranscript]);\n\n  const handleTranscriptChange = (e) => {\n    setEditableTranscript(e.target.value); // Update editable transcript based on user input\n  };\n\n  useEffect(() => {\n    if (textareaRef.current && cursorPosRef.current !== null) {\n      textareaRef.current.selectionStart = cursorPosRef.current;\n      textareaRef.current.selectionEnd = cursorPosRef.current;\n      cursorPosRef.current = null;\n    }\n    }, [editableTranscript]);\n\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>No browser support</span>;\n  }\n\n  if (!isMicrophoneAvailable) {\n    return <span>Please allow access to the microphone</span>;\n  }\n\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"10px\" }}>\n        <button\n          onClick={() => {\n            myFunc(editableTranscript, { api_body: {} }, 5);\n            resetTranscript();\n            setEditableTranscript(\"\");\n            }}\n            style={{\n            backgroundColor: \"rgb(196, 230, 252)\",\n            color: \"black\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Send Transcript\n          </button>\n          <button\n            onClick={showTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            {show_transcript ? \"Hide Transcript\" : \"Show Transcript\"}\n          </button>\n          <button\n            onClick={clearTranscript_func}\n            style={{\n            backgroundColor: \"white\",\n            color: \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            fontSize: \"0.9em\",\n            }}\n          >\n            Clear Transcript\n          </button>\n\n        {/* New button to show replace functionality hint */}\n        <button\n          style={{\n            backgroundColor: selectedText ? \"rgb(255, 245, 157)\" : \"rgb(245, 245, 245)\",\n            color: selectedText ? \"black\" : \"grey\",\n            border: \"none\",\n            padding: \"5px 10px\",\n            borderRadius: \"3px\",\n            cursor: \"default\",\n            fontSize: \"0.8em\",\n          }}\n          title=\"Select text in transcript to replace it\"\n        >\n          {selectedText ? `Selected: \"${selectedText.substring(0, 20)}${selectedText.length > 20 ? '...' : ''}\"` : \"Select text to replace\"}\n        </button>\n      </div>\n\n      {/* Replace text input box */}\n      {showReplaceBox && (\n        <div style={{\n          position: \"relative\",\n          backgroundColor: \"rgb(255, 248, 220)\",\n          border: \"2px solid rgb(255, 193, 7)\",\n          borderRadius: \"8px\",\n          padding: \"15px\",\n          marginBottom: \"10px\",\n          boxShadow: \"0 4px 12px rgba(0,0,0,0.15)\"\n        }}>\n          <div style={{ marginBottom: \"10px\", fontSize: \"0.9em\", fontWeight: \"bold\" }}>\n            Replace: \"<span style={{ fontStyle: \"italic\", color: \"#666\" }}>{selectedText}</span>\"\n          </div>\n          \n          <div style={{ display: \"flex\", gap: \"8px\", alignItems: \"center\" }}>\n            <input\n              ref={replaceInputRef}\n              type=\"text\"\n              value={replaceInput}\n              onChange={(e) => setReplaceInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  handleReplaceText();\n                } else if (e.key === 'Escape') {\n                  handleCancelReplace();\n                }\n              }}\n              placeholder=\"Enter replacement text or prompt...\"\n              style={{\n                flex: 1,\n                padding: \"8px\",\n                border: \"1px solid #ddd\",\n                borderRadius: \"4px\",\n                fontSize: \"0.9em\"\n              }}\n              disabled={isProcessingReplace}\n            />\n            \n            <button\n              onClick={handleReplaceText}\n              disabled={!replaceInput.trim() || isProcessingReplace}\n              style={{\n                backgroundColor: isProcessingReplace ? \"#ccc\" : \"rgb(40, 167, 69)\",\n                color: \"white\",\n                border: \"none\",\n                padding: \"8px 15px\",\n                borderRadius: \"4px\",\n                cursor: isProcessingReplace ? \"not-allowed\" : \"pointer\",\n                fontSize: \"0.9em\",\n                fontWeight: \"bold\"\n              }}\n            >\n              {isProcessingReplace ? \"⏳\" : \"Replace\"}\n            </button>\n            \n          </div>\n          \n          <div style={{ marginTop: \"8px\", fontSize: \"0.8em\", color: \"#666\" }}>\n            💡 Note: `Replace, will replace text with {splitImage}'s response`;\n          </div>\n        </div>\n      )}\n\n      {show_transcript && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"800px\",\n            height: \"550px\",\n            overflowY: \"auto\",\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n          }}\n        >\n          <span>\n            <strong>Listening:</strong>{\" \"}\n            <span\n              style={{\n                color: listening ? \"green\" : \"gray\",\n                fontWeight: 600,\n                animation: listening ? \"flash-green 1s infinite alternate\" : \"none\",\n              }}\n            >\n              {listening ? \"ON\" : \"OFF\"}\n            </span>\n            <style>\n              {`\n                @keyframes flash-green {\n                  0% { opacity: 1; }\n                  100% { opacity: 0.4; }\n                }\n              `}\n            </style>\n          </span>\n\n          <span>\n            <strong>Transcript:</strong>\n            {selectedText && (\n              <span style={{ marginLeft: \"10px\", fontSize: \"0.8em\", color: \"#666\" }}>\n                (`Replace with {splitImage}'s response`);\n              </span>\n            )}\n          </span>\n\n          {interimTranscript && (\n            <div style={{ color: \"#888\", fontStyle: \"italic\", marginBottom: \"8px\" }}>\n              {interimTranscript}\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            value={editableTranscript}\n            onChange={handleTranscriptChange}\n            onSelect={handleTextSelection} // Add selection handler\n            onMouseUp={handleTextSelection} // Handle mouse selection\n            onKeyUp={handleTextSelection} // Handle keyboard selection\n            style={{\n              backgroundColor: \"rgb(255, 255, 255)\",\n              color: \"black\",\n              width: \"100%\",\n              height: \"550px\",\n              border: \"1px solid #ccc\",\n              padding: \"5px\",\n              resize: \"none\",\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Dictaphone;","import React from 'react';\n\nconst MediaDisplay = ({ showImage, imageSrc, largeHeight = 100, largeWidth = 100, smallHeight = 40, smallWidth = 40 }) => {\n    // Determine the dimensions based on `showImage` status\n    const height = showImage ? largeHeight : smallHeight;\n    const width = showImage ? largeWidth : smallWidth;\n  \n    return (\n      <div className=\"p-2\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {/* Always show the image or video at the top center based on `showImage` */}\n        <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\n          {imageSrc && (\n            imageSrc.toLowerCase().endsWith(\".mp4\") ? (\n              <video\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                height={height}\n                width={width}\n                controls={showImage} // Only show controls if `showImage` is true\n                autoPlay\n                loop={false}\n                muted\n              >\n                <source src={imageSrc} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            ) : (\n              <img\n                src={imageSrc}\n                height={height}\n                width={width}\n                style={{ maxWidth: '100%', borderRadius: '8px', objectFit: 'cover' }}\n                alt=\"Media Preview\"\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MediaDisplay;","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n// import { Streamlit } from \"streamlit-component-lib\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport Dictaphone from \"./Dictaphone\";\nimport MediaDisplay from \"./MediaDisplay\";\nimport './spinner.css';\n\n\n// let timer = null;\n// let faceTimer = null;\nlet g_anwers = [];\n// let firstFace = false;\n\nconst CustomVoiceGPT = (props) => {\n  const { api, kwargs = {} } = props;\n  const {\n    commands,\n    height,\n    width,\n    show_video,\n    input_text,\n    no_response_time,\n    face_recon,\n    api_key,\n    refresh_ask,\n    self_image,\n    api_audio,\n    client_user,\n    force_db_root,\n    before_trigger,\n    agent_actions,\n  } = kwargs;\n\n  const [imageSrc, setImageSrc] = useState(kwargs.self_image);\n  const [imageSrc_name, setImageSrc_name] = useState(kwargs.self_image);\n\n  const [message, setMessage] = useState(\"\");\n  const [answers, setAnswers] = useState(kwargs.answers || []);\n  const [listenAfterReply, setListenAfterReply] = useState(false);\n\n  const [modelsLoaded, setModelsLoaded] = useState(false);\n  const [captureVideo, setCaptureVideo] = useState(false);\n  const [textString, setTextString] = useState(\"\");\n  const [apiInProgress, setApiInProgress] = useState(false); // Added state for API in progress\n  const [speaking, setSpeakingInProgress] = useState(false); // Added state for API in progresslistening\n  const [listening, setlistening] = useState(false); // Added state for API in progress\n\n  const [show_conversation, setshow_conversation] = useState(true); // Added state for API in progress\n  // Inside your component:\nconst [showTooltip, setShowTooltip] = useState(false);\nconst [showTooltip_conv, setShowTooltip_conv] = useState(false);\n  const [listenButton, setlistenButton] = useState(false); // Added state for API in progress\n  const [session_listen, setsession_listen] = useState(false);\n  const [convo_button, setconvo_button] = useState(false); // Added state for API in progress\n\n  const [before_trigger_vars, before_trigger_] = useState(kwargs.before_trigger); \n  const faceData = useRef([]);\n  // const faceTriggered = useRef(false);\n  // const videoRef = useRef();\n  // const videoHeight = 480;\n  // const videoWidth = 640;\n  // const canvasRef = useRef();\n  const audioRef = useRef(null);\n  \n\n  const [UserUsedChatWindow, setUserUsedChatWindow] = useState(false);\n  const [buttonName, setButtonName] = useState(\"Click and Ask\");\n  const [buttonName_listen, setButtonName_listen] = useState(\"Listening\");\n\n  const [showImage, setShowImage] = useState(false); // Step 1: Define showImage state\n  const [selectedActions, setSelectedActions] = useState([]);\n  const [datatree, setDataTree] = useState(kwargs.datatree || {});\n  const [datatreeTitle, setDataTreeTitle] = useState(kwargs.datatree_title || \"\");\n\n\nconst [selectedNodes, setSelectedNodes] = useState([]);\n\n// SidebarTree with collapsible nodes, no text wrapping, and improved style\n// Move collapsed and setCollapsed state up to the parent component\nconst [collapsed, setCollapsed] = useState({});\n\nconst SidebarTree = ({ datatree = {}, onSelectionChange, collapsed, setCollapsed }) => {\n  // Remove local collapsed state from SidebarTree\n\n  const handleSelect = (key) => {\n    let newSelected;\n    if (selectedNodes.includes(key)) {\n      newSelected = selectedNodes.filter((k) => k !== key);\n    } else {\n      newSelected = [...selectedNodes, key];\n    }\n    if (onSelectionChange) onSelectionChange(newSelected);\n  };\n\n  // Use a unique path for each node\n  const toggleCollapse = (nodePath) => {\n    setCollapsed((prev) => ({\n      ...prev,\n      [nodePath]: prev[nodePath] === undefined ? false : !prev[nodePath],\n    }));\n  };\n\n  const renderNodes = (tree, level = 1, parentKeys = []) => {\n    if (!tree || typeof tree !== \"object\" || Array.isArray(tree)) return null;\n    const entries = Object.entries(tree);\n    return entries.map(([key, value], idx) => {\n      const nodePath = [...parentKeys, key].join(\"/\"); // Unique path for each node\n      const hasChildren =\n        value.children &&\n        typeof value.children === \"object\" &&\n        !Array.isArray(value.children) &&\n        Object.keys(value.children).length > 0;\n      const isCollapsed = collapsed[nodePath] !== undefined ? collapsed[nodePath] : true;\n      const isLast = idx === entries.length - 1;\n\n      return (\n        <div\n          key={nodePath}\n          style={{\n            marginLeft: level * 14,\n            position: \"relative\",\n            whiteSpace: \"nowrap\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            fontSize: \"14px\",\n            fontFamily: \"inherit\",\n            marginBottom: \"2px\",\n            paddingTop: \"4px\",\n            paddingBottom: \"4px\",\n          }}\n        >\n          {level > 0 && (\n            <div\n              style={{\n                position: \"absolute\",\n                left: -5,\n                top: 0,\n                height: \"100%\",\n                width: 16,\n                zIndex: 0,\n              }}\n            >\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: -5,\n                  top: 0,\n                  bottom: isLast ? \"50%\" : 0,\n                  width: 2,\n                  background: \"#bbb\",\n                  height: hasChildren && !isCollapsed ? \"50%\" : \"100%\",\n                }}\n              />\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: 7,\n                  top: 12,\n                  width: 9,\n                  height: 2,\n                  background: \"#bbb\",\n                }}\n              />\n            </div>\n          )}\n          <div style={{ display: \"flex\", alignItems: \"center\", position: \"relative\", zIndex: 1 }}>\n            {hasChildren && (\n              <button\n                onClick={() => toggleCollapse(nodePath)}\n                style={{\n                  border: \"none\",\n                  background: \"transparent\",\n                  cursor: \"pointer\",\n                  fontSize: \"14px\",\n                  marginRight: \"4px\",\n                  padding: 0,\n                  width: \"18px\",\n                  height: \"18px\",\n                  lineHeight: \"18px\",\n                  userSelect: \"none\",\n                }}\n                aria-label={isCollapsed ? \"Expand\" : \"Collapse\"}\n                tabIndex={-1}\n              >\n                {isCollapsed ? \"▶\" : \"▼\"}\n              </button>\n            )}\n            <input\n              type=\"checkbox\"\n              checked={selectedNodes.includes(key)}\n              onChange={() => handleSelect(key)}\n              style={{ marginRight: \"10px\" }}\n            />\n            {value.hyperlink ? (\n              <a\n                href={value.hyperlink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"#2980b9\",\n                  fontWeight: 500,\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"100%\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </a>\n            ) : (\n              <span\n                style={{\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  maxWidth: \"160px\",\n                  display: \"inline-block\",\n                  verticalAlign: \"middle\",\n                }}\n                title={value.field_name}\n              >\n                {value.field_name}\n              </span>\n            )}\n          </div>\n          {hasChildren && !isCollapsed && (\n            <div style={{ width: \"100%\" }}>\n              {renderNodes(value.children, level + 1, [...parentKeys, key])}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  if (!datatreeTitle || !datatree) return null;\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        padding: 10,\n        maxHeight: 800,\n        overflowY: \"auto\",\n        background: \"transparent\",\n      }}\n    >\n      <h4 style={{ margin: \"0 0 8px 0\", fontWeight: 600 }}>{datatreeTitle}</h4>\n      <div>{renderNodes(datatree)}</div>\n    </div>\n  );\n};\n\n  const [windowWidth, setWindowWidth] = useState(0); // Initial value\n\n    // Create a reusable function for getting the window width\n    const updateWindowWidth = () => {\n      if (typeof window !== 'undefined') {\n          setWindowWidth(window.innerWidth);\n      }\n  };\n\n  // Call the function on component mount to set the initial window width\n  useEffect(() => {\n      updateWindowWidth();\n  }, []);\n\n  useEffect(() => {\n    if (self_image) {\n      // Fetch the image data from the API endpoint\n      fetchImageData(self_image);\n    }\n  }, [self_image]);\n\n  const fetchImageData = async (imageUrl) => {\n    try {\n      const response = await axios.get(`${api_audio}${imageUrl}`, {\n        responseType: 'blob', // Set responseType to 'blob' to handle file response\n      });\n      const objectUrl = URL.createObjectURL(response.data); // Use a different variable name here\n      setImageSrc(objectUrl);\n      setImageSrc_name(imageUrl)\n    } catch (error) {\n      console.error('Error fetching image data:', error);\n    }\n  };\n\n\n\n  const listenContinuously = async () =>{\n    setlistening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-US\",\n    })\n\n}\n\nconst isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n// Update convo_mode function:\nconst convo_mode = async () => {\n  console.log(\"convo_mode - listening?\", listening, \"isMobile:\", isMobile, \"convo_button:\", convo_button);\n  \n  if (!convo_button) {\n    console.log(\"Starting continuous listening...\");\n    setconvo_button(true);\n    listenContinuously();\n  } else {\n    console.log(\"Stopping continuous listening...\");\n    setconvo_button(false);\n    setlistening(false);\n    SpeechRecognition.stopListening();\n  }\n};\n\n// Also update your stopListening function to properly sync the states:\nconst stopListening = () => {\n  setlistening(false);\n  setconvo_button(false); // Add this line to sync the states\n  SpeechRecognition.stopListening();\n  console.log(\"Stopping Listening, isListening=\", listening);\n};\n\n\n  const listenSession = () =>{\n    if (session_listen) {\n    setsession_listen(false)\n  }\n  else{\n    setsession_listen(true)\n  }\n    }\n\n\n\n\n  const handleInputText = (event) => {\n    // Update the state with the input text\n    setTextString(event.target.value);\n  \n    // Set a variable to indicate that the user used the chat window\n    setUserUsedChatWindow(true);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      console.log(\"textString :>> \", textString);\n      myFunc(textString, { api_body: { keyword: \"\" } }, 4);\n      setTextString(\"\");\n    }\n  };\n\n\n  const click_listenButton = () => {\n    setlistenButton(true)\n    if (!listening) {\n      listenContinuously()\n    }\n    setButtonName(\"Please Speak\")\n    console.log(\"listening button listen click\");\n    console.log(listenButton);\n  };\n  const [editingDataframe, setEditingDataframe] = useState(null);\n  const [editedDataframe, setEditedDataframe] = useState(null);\n\n  const myFunc = async (ret, command, type) => {\n\n  // if (type === 9) {\n  //   console.log(\"Text replacement test - type 9 detected\");\n  //   console.log(\"Original text:\", command.api_body?.original_text);\n  //   console.log(\"Replacement prompt:\", command.api_body?.replacement_prompt);\n\n  //   // Return test string for replacement\n  //   return \"<span style='color: red; font-weight: bold;'>TEST REPLACEMENT TEXT - This is a <u>test replacement</u> for the selected text.</span>\";\n  // }\n\n    setMessage(` (${command[\"api_body\"][\"keyword\"]}) ${ret},`);\n    const text = [...g_anwers, { user: ret }];\n    setAnswers([...text]);\n    try {\n      console.log(\"api call on listen...\", command);\n      console.log(\"selected_nodes\", selectedNodes);\n      setApiInProgress(true); // Set API in progress to true\n      // stopListening()\n      // how do I get the dataframe from type?\n      let dataframe = null;\n      if (type === \"dataframe_edit\" && command.api_body && command.api_body.dataframe) {\n        dataframe = command.api_body.dataframe;\n      }\n      const body = {\n        tigger_type: type,\n        api_key: api_key,\n        text: text,\n        self_image: imageSrc_name,\n        face_data: faceData.current,\n        refresh_ask: refresh_ask,\n        client_user: client_user,\n        force_db_root:force_db_root,\n        session_listen:session_listen,\n        before_trigger_vars:before_trigger_vars,\n        selected_actions: selectedActions,\n        selected_nodes: selectedNodes,\n        dataframe: dataframe,\n      };\n      console.log(\"api\");\n      const { data } = await axios.post(api, body);\n      console.log(\"data :>> \", data, body);\n      if (data[\"self_image\"] && data[\"self_image\"] !== imageSrc_name) {\n        fetchImageData(data[\"self_image\"]); // Fetch image data if it's different\n      }\n      \n      if (data[\"text\"]) {\n        setAnswers(data[\"text\"]);\n        g_anwers = [...data[\"text\"]];\n      }\n      \n      if (audioRef.current) {\n        audioRef.current.pause(); // Pause existing playback if any\n      }\n\n      if (data[\"audio_path\"]) {\n        const apiUrlWithFileName = `${api_audio}${data[\"audio_path\"]}`;\n        audioRef.current = new Audio(apiUrlWithFileName);\n    \n        try {\n            await audioRef.current.play();\n            \n            // Set state to indicate speaking in progress\n            setSpeakingInProgress(true);\n            setButtonName_listen(\"Speaking\");\n    \n            // Await playback completion\n            await new Promise((resolve) => {\n                audioRef.current.onended = () => {\n                    console.log(\"Audio playback finished.\");\n                    resolve();\n                };\n            });\n    \n        } catch (error) {\n            console.error(\"Audio playback error:\", error);\n        } finally {\n            // Cleanup or reset after playback\n            audioRef.current = null;\n            setSpeakingInProgress(false);\n            setButtonName_listen(\"Listen\");\n        }\n    }\n\n      setButtonName(\"Click and Ask\")\n      setButtonName_listen(\"Listening\")\n      setSpeakingInProgress(false)\n      setApiInProgress(false)\n      setListenAfterReply(data[\"listen_after_reply\"]);\n      \n      console.log(\"listen after reply\", data[\"listen_after_reply\"], listenAfterReply);\n\n      if (data[\"page_direct\"] !== false && data[\"page_direct\"] !== null) {\n        console.log(\"api has page direct\", data[\"page_direct\"]);\n        // window.location.reload();\n        window.location.href = data[\"page_direct\"];\n      }\n\n      if (UserUsedChatWindow) {\n        setUserUsedChatWindow(false)\n      }\n      else if (listenAfterReply==true) {\n        console.log(\"API END HIT listenAfterReply==TRUE\")\n        setButtonName_listen(\"Awaiting your Answer please speak\")\n      }\n      else if (listenButton) {\n      setlistenButton(false)\n      stopListening()\n      }\n      else if (convo_button){\n        console.log(\"convo mode\")\n        // listenContinuously()\n      }\n\n      if (data[\"dataframe\"]) {\n        setEditingDataframe(data[\"dataframe\"]);\n        setEditedDataframe(data[\"dataframe\"]);\n        return; // Exit further processing if you want\n}\n\n      \n    } catch (error) {\n      console.log(\"api call on listen failed!\", error);\n      setApiInProgress(false); // Set API in progress to false on error\n      setlistenButton(false)\n    }\n\n    updateWindowWidth();\n    console.log(\"ReSize Window\")\n    setSelectedActions([]);\n  };\n\n// Recursive function to find a node by key in the datatree\nfunction findNodeByKey(tree, key) {\n  if (!tree || typeof tree !== \"object\") return null;\n  for (const [k, value] of Object.entries(tree)) {\n    if (k === key) return value;\n    if (value.children) {\n      const found = findNodeByKey(value.children, key);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n  const background_color_chat = refresh_ask?.color_dict?.background_color_chat || 'transparent';\n  const splitImage = self_image.split('.')[0]; // Split by dot\n  const placeholder = `Chat with ${splitImage}`;\n\n  const firstKey = selectedNodes[0] || null;\n  const nodeObj = firstKey ? findNodeByKey(datatree, firstKey) : null;\n  const nodeTitle = nodeObj?.field_name;\n  const nodeLink = nodeObj?.hyperlink;\n\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sidebarWide, setSidebarWide] = useState(450);\n\nreturn (\n  <div style={{ display: \"flex\", width: \"100%\", minHeight: \"100vh\" }}>\n    {/* Sidebar Toggle and Sidebar - Only show if not mobile or if sidebar is open */}\n    {(!isMobile || showSidebar) && (\n      <div style={{ display: \"flex\", flexDirection: \"column\", flexShrink: 0 }}>\n        {/* Sidebar Toggle Button */}\n        <div style={{ display: \"flex\", alignItems: \"center\", padding: isMobile ? \"2px 4px\" : \"4px 8px\" }}>\n          <button\n            onClick={() => setShowSidebar((prev) => !prev)}\n            style={{\n              fontSize: isMobile ? \"16px\" : \"18px\",\n              padding: isMobile ? \"2px 8px\" : \"4px 10px\",\n              marginRight: isMobile ? \"3px\" : \"6px\",\n              border: \"none\",\n              borderRadius: \"50%\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n              height: isMobile ? \"28px\" : \"32px\",\n              width: isMobile ? \"28px\" : \"32px\",\n              boxShadow: \"none\",\n              outline: \"none\",\n              transition: \"background 0.2s\",\n            }}\n            aria-label={showSidebar ? \"Hide Sidebar\" : \"Show Sidebar\"}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n        \n        {/* Sidebar Width Toggle Button (only visible when sidebar is open) */}\n        {showSidebar && !isMobile && (\n          <button\n            onClick={() => setSidebarWide((prev) => (prev === 450 ? 250 : 450))}\n            style={{\n              border: \"transparent\",\n              background: \"transparent\",\n              cursor: \"pointer\",\n              height: \"32px\",\n              margin: \"6px 0 0 0\",\n              width: \"32px\",\n              alignSelf: \"flex-end\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              borderRadius: \"50%\",\n              boxShadow: \"none\",\n              transition: \"background 0.2s\",\n            }}\n          >\n            {sidebarWide === 450 ? <span>⏪</span> : <span>⏩</span>}\n          </button>\n        )}\n        \n        {/* Sidebar Tree */}\n        {showSidebar && (\n          <div \n            style={{ \n              width: isMobile ? \"280px\" : sidebarWide, \n              borderRight: \"1px solid #ccc\", \n              padding: isMobile ? 5 : 10, \n              transition: \"width 0.2s\",\n              maxHeight: isMobile ? \"50vh\" : \"none\",\n              overflowY: isMobile ? \"auto\" : \"visible\"\n            }}\n          >\n            <SidebarTree\n              datatree={datatree}\n              onSelectionChange={setSelectedNodes}\n              collapsed={collapsed}\n              setCollapsed={setCollapsed}\n            />          \n          </div>\n        )}\n      </div>\n    )}\n\n    {/* Main Content */}\n    <div \n      style={{ \n        flex: 1, \n        padding: isMobile ? \"4px\" : \"8px\", // Reduce padding on mobile\n        minWidth: 0 // Prevent flex item from overflowing\n      }}\n    >\n      {/* Mobile-only sidebar toggle when sidebar is hidden */}\n      {isMobile && !showSidebar && (\n        <div style={{ marginBottom: \"8px\" }}>\n          <button\n            onClick={() => setShowSidebar(true)}\n            style={{\n              fontSize: \"16px\",\n              padding: \"4px 8px\",\n              border: \"1px solid #2980b9\",\n              borderRadius: \"4px\",\n              background: \"transparent\",\n              color: \"#2980b9\",\n              cursor: \"pointer\",\n            }}\n          >\n            {showSidebar ? \"⏴\" : \"⏵\"}\n          </button>\n        </div>\n      )}\n\n      <div>\n        {firstKey && nodeObj ? (\n          <div style={{ fontSize: isMobile ? \"14px\" : \"16px\", marginBottom: \"8px\" }}>\n            Working Page:{\" \"}\n            {nodeLink ? (\n              <a href={nodeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                {nodeTitle}\n              </a>\n            ) : (\n              nodeTitle\n            )}\n          </div>\n        ) : (\n          <div></div>\n        )}\n\n        {/* Show other selected nodes, if any */}\n        {selectedNodes.length > 1 && (\n          <div style={{ marginTop: 8, fontSize: isMobile ? \"12px\" : \"14px\" }}>\n            <strong>Extra Context:</strong>{\" \"}\n            {selectedNodes.slice(1).map((key, idx) => {\n              const node = findNodeByKey(datatree, key);\n              return (\n                <span key={key} style={{ marginRight: 8 }}>\n                  {node?.field_name || key}\n                  {idx < selectedNodes.length - 2 ? \",\" : \"\"}\n                </span>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Rest of your content stays the same but with mobile padding adjustments */}\n      <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n        {/* Media Display */}\n        <div>\n          <MediaDisplay\n            showImage={showImage}\n            imageSrc={imageSrc}\n            largeHeight={isMobile ? 80 : 100}\n            largeWidth={isMobile ? 80 : 100}\n            smallHeight={isMobile ? 30 : 40}\n            smallWidth={isMobile ? 30 : 40}\n          />\n        </div>\n\n        {/* Chat window */}\n        <div style={{ \n          flex: showImage ? 1 : '100%', \n          overflowY: 'auto', \n          maxHeight: isMobile ? '300px' : '450px' \n        }}>\n          {show_conversation && (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                maxHeight: isMobile ? '300px' : '450px',\n                height: isMobile ? '300px' : '450px',\n                overflowY: 'auto',\n                padding: isMobile ? '5px' : '10px',\n              }}\n            >\n              {/* Your chat messages - keep existing code */}\n              {answers.map((answer, idx) => (\n                <div\n                  key={idx}\n                  className=\"chat-message-container\"\n                  style={{\n                    marginBottom: '5px',\n                    padding: isMobile ? '3px' : '5px',\n                    borderRadius: '4px',\n                    border: '1px solid #ccc',\n                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n                  }}\n                >\n                  {/* Keep your existing chat message content */}\n                  <div\n                    className=\"chat-user\"\n                    style={{\n                      textAlign: 'right',\n                      marginLeft: 'auto',\n                      padding: isMobile ? '3px' : '5px',\n                      fontSize: isMobile ? '12px' : '14px'\n                    }}\n                  >\n                    {client_user}: <span>{answer.user}</span>\n                  </div>\n                  <div\n                    className=\"chat-response-container\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'flex-start',\n                      backgroundColor: background_color_chat,\n                      padding: isMobile ? '5px' : '10px',\n                    }}\n                  >\n                    {imageSrc && (\n                      <div className=\"chat-image\" style={{ marginRight: isMobile ? '5px' : '10px' }}>\n                        <img src={imageSrc} alt=\"response\" style={{ width: isMobile ? '30px' : '50px' }} />\n                      </div>\n                    )}\n                    <div\n                      className=\"chat-response-text\"\n                      style={{ \n                        flex: 1, \n                        wordBreak: 'break-word',\n                        fontSize: isMobile ? '12px' : '14px'\n                      }}\n                    >\n                      {answer.resp\n                        ? <span dangerouslySetInnerHTML={{ __html: answer.resp }} />\n                        : <span className=\"spinner\" />}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Input text section - keep existing but adjust for mobile */}\n      {input_text && (\n        <>\n          <hr style={{ margin: '3px 0' }} />\n          <div className=\"form-group\" style={{ display: \"flex\", alignItems: \"center\" }}>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder={placeholder}\n              value={textString}\n              onChange={handleInputText}\n              onKeyDown={handleOnKeyDown}\n              style={{ \n                flex: 1,\n                fontSize: isMobile ? '14px' : '16px',\n                padding: isMobile ? '6px' : '8px'\n              }}\n            />\n          </div>\n          <hr style={{ margin: '3px 0' }} />\n        </>\n      )}\n\n          {editingDataframe &&\n            Array.isArray(editingDataframe) &&\n            editingDataframe.length > 0 &&\n            editedDataframe &&\n            Array.isArray(editedDataframe) &&\n            editedDataframe.length > 0 && (\n              <div\n                style={{\n            padding: 20,\n            border: \"2px solid #b3c6e0\",\n            borderRadius: \"12px\",\n            background: \"rgba(240, 248, 255, 0.7)\",\n            boxShadow: \"0 2px 12px rgba(100, 150, 200, 0.08)\",\n            marginBottom: 16,\n            marginTop: 8,\n                }}\n              >\n                <h3 style={{ marginTop: 0, color: \"#2a3b5d\" }}>Edit Dataframe</h3>\n                <table\n            style={{\n              borderCollapse: \"collapse\",\n              width: \"100%\",\n              background: \"rgba(255,255,255,0.5)\",\n              borderRadius: \"8px\",\n              overflow: \"hidden\",\n              boxShadow: \"0 1px 4px rgba(100,150,200,0.06)\",\n            }}\n                >\n            <thead>\n              <tr>\n                {Object.keys(editingDataframe[0]).map((col) => (\n                  <th\n              key={col}\n              style={{\n                border: \"1px solid #c8d6e5\",\n                padding: 6,\n                background: \"rgba(200,220,255,0.35)\",\n                color: \"#2a3b5d\",\n                fontWeight: 600,\n              }}\n                  >\n              {col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {editedDataframe.map((row, rowIdx) => (\n                <tr key={rowIdx}>\n                  {Object.keys(row).map((col) => (\n              <td\n                key={col}\n                style={{\n                  border: \"1px solid #c8d6e5\",\n                  padding: 4,\n                  background: \"rgba(255,255,255,0.3)\",\n                }}\n              >\n                <input\n                  value={row[col]}\n                  onChange={e => {\n                    const newDF = editedDataframe.map((r, i) =>\n                i === rowIdx ? { ...r, [col]: e.target.value } : r\n                    );\n                    setEditedDataframe(newDF);\n                  }}\n                  style={{\n                    width: \"100%\",\n                    background: \"rgba(255,255,255,0.5)\",\n                    border: \"1px solid #b3c6e0\",\n                    borderRadius: \"4px\",\n                    padding: \"2px 4px\",\n                    color: \"#2a3b5d\",\n                  }}\n                />\n              </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n                </table>\n                <div style={{ marginTop: 12 }}>\n            <button\n              style={{\n                marginRight: 8,\n                background: \"rgba(42, 59, 93, 0.8)\",\n                color: \"#fff\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={async () => {\n                // Send editedDataframe to API\n  await myFunc(textString, { api_body: { dataframe: editedDataframe } }, \"dataframe_edit\");\n  setEditingDataframe(null);\n  setEditedDataframe(null);\n              }}\n            >\n              Save\n            </button>\n            <button\n              style={{\n                background: \"rgba(200,220,255,0.5)\",\n                color: \"#2a3b5d\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                padding: \"6px 14px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                setEditingDataframe(null);\n                setEditedDataframe(null);\n              }}\n            >\n              Cancel\n            </button>\n                </div>\n              </div>\n          )}\n\n<div className=\"form-group\" style={{ \n        display: \"flex\", \n        alignItems: \"left\", \n        flexWrap: \"wrap\",\n        gap: isMobile ? \"4px\" : \"8px\"\n      }}>\n        <button\n          onClick={click_listenButton}\n          style={{\n            marginLeft: isMobile ? 4 : 8,\n            background: listenButton ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n            border: 'none',\n            borderRadius: '50%',\n            width: isMobile ? 32 : 36,\n            height: isMobile ? 32 : 36,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            color: 'white',\n            fontSize: isMobile ? 16 : 20,\n            boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n            transition: 'background 0.2s',\n          }}\n          title=\"Click and Ask\"\n        >\n          <span role=\"img\" aria-label=\"microphone\">🎤</span>\n        </button>\n      \n<button\n  onClick={convo_mode}\n  onMouseEnter={() => setShowTooltip_conv(true)}\n  onMouseLeave={() => setShowTooltip_conv(false)}\n  style={{\n    marginLeft: 8,\n    background: convo_button ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={convo_button ? \"paper\" : \"x\"}>\n  {convo_button ? \"🎧\" : \"🔇\"}\n</span>  {showTooltip_conv && (\n    <span\n      style={{\n        position: \"absolute\",\n        top: \"-38px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        background: \"#222\",\n        color: \"#fff\",\n        padding: \"4px 10px\",\n        borderRadius: \"4px\",\n        fontSize: \"13px\",\n        whiteSpace: \"nowrap\",\n        zIndex: 1000,\n        pointerEvents: \"none\",\n      }}\n    >\n      {convo_button ? \"Listening On\" : \"Listening OFF\"}\n    </span>\n  )}\n</button>\n\n\n<button\n  onClick={listenSession}\n  onMouseEnter={() => setShowTooltip(true)}\n  onMouseLeave={() => setShowTooltip(false)}\n  style={{\n    marginLeft: 8,\n    background: session_listen ? 'rgb(26, 182, 28)' : \"rgb(19, 123, 193)\",\n    border: 'none',\n    borderRadius: '50%',\n    width: 36,\n    height: 36,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'pointer',\n    color: 'white',\n    fontSize: 20,\n    boxShadow: '0 1px 4px rgba(0,0,0,0.08)',\n    transition: 'background 0.2s',\n    position: 'relative',\n  }}\n>\n<span role=\"img\" aria-label={session_listen ? \"paper\" : \"x\"}>\n  {session_listen ? \"📄\" : \"📄\"}\n</span>  {showTooltip && (\n<span\n  style={{\n    position: \"absolute\",\n    top: \"-38px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    background: 'rgb(235, 243, 244)',\n    color: 'rgb(45, 68, 72)',\n    padding: \"4px 10px\",\n    borderRadius: \"4px\",\n    fontSize: \"13px\",\n    whiteSpace: \"normal\",      // allow text to wrap\n    maxWidth: \"220px\",         // prevent it from being too wide\n    textAlign: \"center\",       // center the text\n    zIndex: 1000,\n    pointerEvents: \"none\",\n  }}\n>\n  {session_listen\n    ? \"ON\"\n    : `Enable's \"hey ${splitImage}\" commands & holds Transcript\"`}\n</span>\n  )}\n</button>\n\n</div>\n\n\n              {/* Agent Actions Horizontal Button-Style Multi-Select */}\n                {Array.isArray(agent_actions) && agent_actions.length > 0 && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      justifyContent: 'right',\n                      marginTop: '8px',\n                      gap: '6px',\n                      alignItems: 'right',\n                    }}\n                  >\n                    <span style={{ fontWeight: 600, marginRight: 12, minWidth: 90, textAlign: 'left' }}>\n                      Agent Actions:\n                    </span>\n                    {agent_actions.map((action, idx) => {\n              const selected = selectedActions.includes(action);\n              return (\n                <button\n                  key={idx}\n                  onClick={() => {\n                    if (selected) {\n                      setSelectedActions(selectedActions.filter((a) => a !== action));\n                    } else {\n                      setSelectedActions([...selectedActions, action]);\n                    }\n                  }}\n                  style={{\n                    fontSize: '12px',\n                    padding: '5px 10px',\n                    backgroundColor: selected ? 'rgb(59, 159, 72)' : 'rgb(200, 233, 238)',\n                    color: selected ? 'white' : 'black',\n                    border: '1px solidrgb(239, 242, 244)',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                  }}\n                >\n                  {action}\n                </button>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Dictaphone component */}\n        <div className=\"p-2\" style={{ marginBottom: '15px' }}>\n          <Dictaphone\n            commands={commands}\n            myFunc={myFunc}\n            listenAfterReply={listenAfterReply}\n            no_response_time={no_response_time}\n            apiInProgress={apiInProgress}\n            listenButton={listenButton}\n            session_listen={session_listen}\n            listening={listening}\n            initialFinalTranscript={kwargs.initialFinalTranscript || \"\"}\n            splitImage={splitImage}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomVoiceGPT;\n\n\n  // useEffect(() => {\n  //   const loadModels = async () => {\n  //     const MODEL_URL = process.env.PUBLIC_URL + \"/models\";\n\n  //     Promise.all([\n  //       faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n  //       faceapi.nets.ageGenderNet.loadFromUri(MODEL_URL),\n  //     ]).then(() => setModelsLoaded(true));\n  //   };\n  //   loadModels();\n  //   const interval = setInterval(() => {\n  //     // console.log(\"faceData.current :>> \", faceData.current);\n  //   }, 3000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n    // const startVideo = () => {\n  //   setCaptureVideo(true);\n  //   navigator.mediaDevices\n  //     .getUserMedia({ video: { width: 300 } })\n  //     .then((stream) => {\n  //       let video = videoRef.current;\n  //       video.srcObject = stream;\n  //       video.play();\n  //     })\n  //     .catch((err) => {\n  //       console.error(\"error:\", err);\n  //     });\n  // };\n\n  // const handleVideoOnPlay = () => {\n  //   setInterval(async () => {\n  //     if (canvasRef && canvasRef.current) {\n  //       canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(\n  //         videoRef.current\n  //       );\n  //       const displaySize = {\n  //         width: videoWidth,\n  //         height: videoHeight,\n  //       };\n\n  //       faceapi.matchDimensions(canvasRef.current, displaySize);\n\n  //       const detections = await faceapi\n  //         .detectAllFaces(\n  //           videoRef.current,\n  //           new faceapi.TinyFaceDetectorOptions()\n  //         )\n  //         .withFaceLandmarks()\n  //         .withFaceExpressions();\n\n  //       const resizedDetections = faceapi.resizeResults(detections, displaySize);\n\n  //       if (resizedDetections.length > 0) {\n  //         faceData.current = resizedDetections;\n  //         if (!faceTriggered.current && face_recon) {\n  //           myFunc(\"\", { api_body: { keyword: \"\" } }, 2);\n  //           faceTriggered.current = true;\n  //         }\n  //       } else {\n  //         faceTimer && clearTimeout(faceTimer);\n  //         setTimeout(() => {\n  //           faceData.current = [];\n  //         }, 1000);\n  //       }\n\n  //       if (resizedDetections.length > 0 && !firstFace) {\n  //         firstFace = true;\n  //         if (kwargs.hello_audio) {\n  //           const audio = new Audio(kwargs.hello_audio);\n  //           audio.play();\n  //         }\n  //       }\n\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         canvasRef.current\n  //           .getContext(\"2d\")\n  //           .clearRect(0, 0, videoWidth, videoHeight);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n  //       canvasRef &&\n  //         canvasRef.current &&\n  //         faceapi.draw.drawFaceExpressions(\n  //           canvasRef.current,\n  //           resizedDetections\n  //         );\n  //     }\n  //   }, 300);\n  // };\n\n  // const closeWebcam = () => {\n  //   videoRef.current.pause();\n  //   videoRef.current.srcObject.getTracks()[0].stop();\n  //   setCaptureVideo(false);\n  // };","import React, { useEffect, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport VoiceGPT from \"./VoiceGPT.jsx\"\n\nconst Main = (props: ComponentProps) => {\n  const { api, kwargs } = props.args\n  useEffect(() => Streamlit.setFrameHeight())\n  return (\n    <>\n      <VoiceGPT api={api} kwargs={kwargs} />\n    </>\n  )\n}\n\nexport default withStreamlitConnection(Main)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Main from \"./Main\"\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport { ThemeProvider, LightTheme } from \"baseui\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={LightTheme}>\n        <Main />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}